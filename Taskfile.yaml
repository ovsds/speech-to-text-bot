version: 3

silent: true

includes:
  scripts:
    taskfile: ./.scripts
    dir: ./.scripts
  backend:
    taskfile: ./backend
    dir: ./backend
  docker:
    taskfile: ./docker
    dir: ./docker

vars:
  NENV: "node_modules"
  SERVICES: "backend"

tasks:
  _prettier:
    internal: true
    cmds:
      - "{{.NENV}}/.bin/prettier {{.COMMAND}}"

  _with_nvm:
    internal: true
    cmds:
      - "source ${HOME}/.nvm/nvm.sh && nvm install && {{.COMMAND}}"

  init:
    desc: Initialize project environment
    cmds:
      - echo 'Installing node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm install" }

      - echo 'Installing husky pre-commit...'
      - task: _with_nvm
        vars: { COMMAND: "npm run prepare" }

      - echo 'Installing .scripts dependencies...'
      - task: scripts:init

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:init"

  lint:
    desc: Lint project
    cmds:
      - echo 'Running prettier checks...'
      - task: _prettier
        vars: { COMMAND: "--check ." }

      - echo 'Running scripts checks...'
      - task: scripts:lint

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:lint"

      - echo 'Running GHA checks...'
      - GH_TOKEN="$(gh auth token)" zizmor .

  lint-fix:
    desc: Lint fix project
    cmds:
      - echo 'Running prettier fixes...'
      - task: _prettier
        vars: { COMMAND: "--write ." }

      - echo 'Running scripts fixes...'
      - task: scripts:lint-fix

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:lint-fix"

      - echo 'Running GHA checks...'
      - GH_TOKEN="$(gh auth token)" zizmor .

  test:
    desc: Test project
    cmds:
      - echo 'Running tests...'

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:test"

  clean:
    desc: Clean project environment
    cmds:
      - echo 'Cleaning node dependencies...'
      - rm -rf {{.NENV}}

      - echo 'Cleaning .scripts dependencies...'
      - task: scripts:clean

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:clean"

  dependencies-update:
    desc: Update dependencies
    cmds:
      - echo 'Updating node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm update" }

      - echo 'Updating .scripts dependencies...'
      - task: scripts:dependencies-update

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:dependencies-update"

  dependencies-check:
    desc: Check dependencies
    cmds:
      - echo 'Checking node dependencies...'
      - task: _with_nvm
        vars: { COMMAND: "npm outdated" }
      - task: _with_nvm
        vars: { COMMAND: "npm audit" }

      - echo 'Checking .scripts dependencies...'
      - task: scripts:dependencies-check

      - for: { var: SERVICES, as: SERVICE }
        task: "{{.SERVICE}}:dependencies-check"

  update-from-template:
    desc: Update project from template
    cmds:
      - echo 'Updating project from template...'
      - cookiecutter
        --no-input
        --overwrite-if-exists
        --output-dir ../
        {{.TEMPLATE_PATH}}
        project_name='Speech To Text Bot'
        project_slug='speech-to-text-bot'
        node_version='v21.5.0'
        owner_name='Dmitry Ovsiannikov'
        owner_github_login='ovsds'
        scripts='true'
        services='backend'
        with_python='true'
        with_cookiecutter='false'
        with_trivy='true'
        with_zizmor='true'
        with_docker='true'
    vars:
      TEMPLATE_PATH: '{{.TEMPLATE_PATH | default "https://github.com/ovsds/template-repository"}}'

  configure-builder:
    desc: Configure buildx for multi-arch builds
    cmds:
      - echo 'Configuring buildx...'
      - docker buildx create
        --driver docker-container
        --use
